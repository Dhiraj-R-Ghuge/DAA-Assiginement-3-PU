*** This problem  Lemonade Change , (Leetcode problem number: 860) :
def lemonade_change(bills):
    five = 0
    ten = 0

    for bill in bills:
        if bill == 5:
            five += 1
        elif bill == 10:
            if five == 0:
                return False
            five -= 1
            ten += 1
        elif bill == 20:
            if ten > 0 and five > 0:
                ten -= 1
                five -= 1
            elif five >= 3:
                five -= 3
            else:
                return False

    return True

# Example usage:
bills = [5, 5, 5, 10, 20]
result = lemonade_change(bills)
print("Can provide change:", result)

Explanation:
The first two customers pay with $5, so no change is needed.
The third and fourth customers pay with $10, so we give them one $5 bill each as change.
The fifth customer pays with $20, but we only have two $10 bills and no $5 bills left, so we cannot provide the correct change.
Time Complexity:
The time complexity is 𝑂(𝑛)
O(n), where 𝑛
n is the number of customers in the bills list, since we only loop through the list once.
Thus, the overall time complexity is 𝑂(𝑛)O(n).
