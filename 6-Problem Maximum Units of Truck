*** This problem Implementaion  Maximum Units on a Truck , (Leetcode problem number: 1710) :
def maximum_units(boxTypes, truckSize):
    # Sort the box types based on the number of units per box in decreasing order
    boxTypes.sort(key=lambda x: x[1], reverse=True)

    total_units = 0
    for numberOfBoxes, numberOfUnitsPerBox in boxTypes:
        # Take as many boxes as possible from the current type
        if truckSize >= numberOfBoxes:
            total_units += numberOfBoxes * numberOfUnitsPerBox
            truckSize -= numberOfBoxes
        else:
            total_units += truckSize * numberOfUnitsPerBox
            break  # The truck is full

    return total_units

# Example usage:
boxTypes = [[1, 3], [2, 2], [3, 1]]  # [numberOfBoxes, numberOfUnitsPerBox]
truckSize = 4  # Maximum number of boxes the truck can carry
result = maximum_units(boxTypes, truckSize)
print("Maximum units that can be carried:", result)



Explanation:
We have 1 box with 3 units, 2 boxes with 2 units each, and 3 boxes with 1 unit each.
The truck can carry at most 4 boxes.
First, we take the 1 box with 3 units.
Then we take the 2 boxes with 2 units each.
We still have room for 1 more box, so we take 1 box with 1 unit.
This results in a total of 3+4+1=8 3+4+1=8 units.
Time Complexity:
Sorting the boxTypes array takes 𝑂(𝑛log⁡𝑛)
O(nlogn), where 𝑛
n is the number of box types.
Iterating through the boxTypes array takes 
𝑂(𝑛)
O(n).
Thus, the overall time complexity is 𝑂(𝑛log𝑛)
O(nlogn), where 𝑛
n is the number of box types.
