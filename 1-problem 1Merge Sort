***In this problem no 1 have merge sort implementation with time complexity TC: O(n log n)
def merge_sort(arr):
    # Base case: if the array is of length 1 or less, return the array
    if len(arr) <= 1:
        return arr

    # Split the array into two halves
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # Recursively sort both halves
    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)

    # Merge the sorted halves
    return merge(left_sorted, right_sorted)

def merge(left, right):
    sorted_arr = []
    i = j = 0

    # Merge the two arrays while maintaining order
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_arr.append(left[i])
            i += 1
        else:
            sorted_arr.append(right[j])
            j += 1

    # If there are any remaining elements in the left or right array, append them
    sorted_arr.extend(left[i:])
    sorted_arr.extend(right[j:])

    return sorted_arr

# Example usage:
arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = merge_sort(arr)
print("Sorted array:", sorted_arr)

Info about using time complexity of given problem :
Time Complexity:
Splitting the array: Every time we split the array in half, it takes 
𝑂(log𝑛)
O(logn) steps since we're dividing the problem in two at each step.
Merging: The merging step at each level of recursion takes 
𝑂(𝑛)
O(n), where 𝑛
n is the size of the array.
Thus, the overall time complexity is 
𝑂(𝑛log⁡𝑛)
O(nlogn).
