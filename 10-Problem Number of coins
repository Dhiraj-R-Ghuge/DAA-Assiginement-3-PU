*** This Problem  Numberof Coins (GeeksForGeeks) :
def min_coins(coins, m, V):
    # Create a DP array to store the minimum coins for each value from 0 to V
    dp = [float('inf')] * (V + 1)
    
    # Base case: No coins are needed to make 0 value
    dp[0] = 0

    # Compute minimum coins required for all values from 1 to V
    for i in range(1, V + 1):
        for coin in coins:
            if coin <= i:
                dp[i] = min(dp[i], dp[i - coin] + 1)

    # If dp[V] is still infinity, it means it's not possible to make that amount
    return dp[V] if dp[V] != float('inf') else -1

# Example usage:
coins = [1, 2, 5]  # Coin denominations
V = 11  # Value to make
result = min_coins(coins, len(coins), V)
print("Minimum number of coins:", result)


Explanation:
We need to make the value 11. The minimum number of coins to make 11 using denominations of [1, 2, 5] is:
Use two 5 coins (5 + 5 = 10) and one 1 coin (10 + 1 = 11).
Hence, a total of 3 coins.
Time Complexity:𝑂(𝑚×𝑉)
O(m×V), where m is the number of coins and V is the value to be made. This is because for each value from 1 to V, we check all coin denominations.
Space Complexity:
𝑂(𝑉)O(V), as we are using a DP array of size 𝑉+1V+1.
Thus, the overall time complexity is 
𝑂(𝑚×𝑉)O(m×V).

