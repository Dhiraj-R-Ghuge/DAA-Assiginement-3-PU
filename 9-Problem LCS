*** This problem  LCS LeetCode (problem number 1143) :
def longest_common_subsequence(text1, text2):
    # Create a 2D DP array filled with 0's
    dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)]

    # Fill the DP table
    for i in range(1, len(text1) + 1):
        for j in range(1, len(text2) + 1):
            if text1[i - 1] == text2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    # The value at dp[len(text1)][len(text2)] is the length of the LCS
    return dp[len(text1)][len(text2)]

# Example usage:
text1 = "abcde"
text2 = "ace"
result = longest_common_subsequence(text1, text2)
print("Length of LCS:", result)


Explanation:
The LCS is "ace", which has a length of 3.

Time Complexity:
The time complexity is 𝑂(𝑚×𝑛)
O(m×n), where m is the length of text1 and n is the length of text2, because we fill out an 𝑚×𝑛
m×n DP table.
Space Complexity:
The space complexity is 𝑂(𝑚×𝑛)
O(m×n) due to the DP table. However, this can be optimized to 𝑂(min(𝑚,𝑛))
O(min(m,n)) by only storing the current and previous rows of the table.
Thus, the overall complexity is 𝑂(𝑚×𝑛)
O(m×n).
