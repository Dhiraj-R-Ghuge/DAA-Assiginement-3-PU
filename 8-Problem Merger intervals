*** This problem  Merge Intervals (Leetcode problem number: 56) :
def merge(intervals):
    # If there are no intervals, return an empty list
    if not intervals:
        return []

    # Sort intervals based on the start of each interval
    intervals.sort(key=lambda x: x[0])

    # Initialize the result list with the first interval
    merged = [intervals[0]]

    for current in intervals[1:]:
        # Get the last interval in the merged list
        last_merged = merged[-1]

        # If the current interval overlaps with the last merged interval
        if current[0] <= last_merged[1]:
            # Merge by updating the end of the last merged interval
            last_merged[1] = max(last_merged[1], current[1])
        else:
            # If it doesn't overlap, add the current interval to the result
            merged.append(current)

    return merged

# Example usage:
intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]
result = merge(intervals)
print("Merged intervals:", result)

Explanation:
The intervals [1, 3] and [2, 6] overlap, so we merge them into [1, 6].
The intervals [8, 10] and [15, 18] do not overlap with any other intervals, so they remain unchanged.
Time Complexity:
Sorting the intervals takes 𝑂(𝑛log𝑛)
O(nlogn), where 𝑛
n is the number of intervals.
Merging the intervals takes 𝑂(𝑛)
O(n) as we iterate through the sorted list of intervals once.
Thus, the overall time complexity is 𝑂(𝑛log⁡𝑛)O(nlogn).
