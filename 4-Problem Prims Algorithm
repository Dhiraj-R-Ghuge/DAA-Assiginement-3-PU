*** This problem Implementation of Prim algorithm :
import heapq

# Class to represent a graph
class Graph:
    def __init__(self, vertices):
        self.V = vertices  # Number of vertices
        self.graph = [[] for _ in range(vertices)]  # Adjacency list

    # Add an edge to the graph
    def add_edge(self, u, v, weight):
        self.graph[u].append((v, weight))
        self.graph[v].append((u, weight))  # Since the graph is undirected

    # Function to perform Prim's algorithm
    def prim_mst(self):
        # Initialize a priority queue (min-heap)
        pq = []
        
        # To track the nodes included in the MST
        in_mst = [False] * self.V
        
        # Keys used to pick the minimum weight edge
        key = [float('inf')] * self.V
        key[0] = 0  # Start from vertex 0
        
        # To store the parent of each vertex to construct the MST
        parent = [-1] * self.V
        
        # Insert the source node into the priority queue
        heapq.heappush(pq, (0, 0))  # (key, vertex)

        while pq:
            # Extract the vertex with the smallest key value
            weight, u = heapq.heappop(pq)

            # If the vertex is already included in the MST, skip it
            if in_mst[u]:
                continue

            # Mark the vertex as included in the MST
            in_mst[u] = True

            # Traverse all adjacent vertices of u
            for neighbor, edge_weight in self.graph[u]:
                # If the neighbor is not in the MST and the edge weight is less than the current key
                if not in_mst[neighbor] and edge_weight < key[neighbor]:
                    key[neighbor] = edge_weight
                    parent[neighbor] = u
                    heapq.heappush(pq, (key[neighbor], neighbor))

        # Print the edges of the MST
        for i in range(1, self.V):
            print(f"Edge: {parent[i]} - {i}, Weight: {key[i]}")

# Example usage:
if __name__ == "__main__":
    g = Graph(5)
    g.add_edge(0, 1, 2)
    g.add_edge(0, 3, 6)
    g.add_edge(1, 2, 3)
    g.add_edge(1, 3, 8)
    g.add_edge(1, 4, 5)
    g.add_edge(2, 4, 7)
    g.add_edge(3, 4, 9)

    print("Edges in the Minimum Spanning Tree (MST):")
    g.prim_mst()
